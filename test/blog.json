[
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tA year ago I was a young developer starting his journey on React. My client came to see my team and told us: \u201cWe need to make reusable components\u201d, I asked him: \u201cWhat is a reusable component?\u201d and the answer was \u201cThis project is a pilot on the subject\u201d.\n2 months later another developer tried to use our components and the disillusion started: despite our efforts, our component were not reusable\u00a0\ud83d\ude31\nAt the time we managed to work with him to improve our code so that he could use it, but how could we have avoided the problem?\nThe answer was given to me by Florian Rival, a former developer at Bam, now working for Facebook: Storybook !\n Storybook, what is that?\nIt is an open source visual documentation software (here is the repo). It allows you to display the different states of your component. The cluster of all the different cases for your component are called the component stories.\nThis allows you to visually describe your components and so anyone who wants to use your components can just look at your stories and see how to use it. No need to dig in the code to find all the use cases, they are all there!\nA picture is worth a thousand words, I let you check the best example I know, the open Storybook of Airbnb.\nOne interesting thing to\u00a0note is that it\u2019s working with Vue, Angular and React!\nUsage example\nLet\u2019s make an example to explain this better to you. I will use a react todo list, I started with the one on this repo.\nThen I added Storybook to the project, I won\u2019t detail this part as the\u00a0Storybook doc\u00a0is very good. I would say it takes approximately 20 minutes to add storybook to your project, but might take longer to properly setup the webpack for your css.\nNow I\u2019ll focus on the component FilteredList that display the todos, first it looked like this:\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst StyledUl = styled.ul`\r\n  list-style: none;\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 0;\r\n  background: #f2f2f2;\r\n  border: 1px solid rgba(229, 229, 229, 0.5);\r\n  color: #888;\r\n`;\r\n\r\nexport default function FilteredList(props) {\r\n    const {items, changeStatus} = props;\r\n\r\n    if (items.length === 0) {\r\n        return (\r\n            <StyledP>There are no items.</StyledP>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <StyledUl>\r\n            {items.map(item => (\r\n                <TodoItem key={item.id} data={item} changeStatus={changeStatus}/>\r\n            ))}\r\n        </StyledUl>\r\n    );\r\n}\r\n\n(It is not exactly the same as the one on the repo, I\u00a0used styled-component instead of plain css)\nTodoItem is the component that displays an element of the list.\nHere we can see there are two different branches in the render: the nominal case and the empty state.\nLet\u2019s write some stories, I created a file FilteredList.stories.js\u00a0and added this inside:\n\r\nimport React from 'react';\r\nimport { storiesOf } from '@storybook/react';\r\nimport FilteredList from \"./FilteredList\";\r\n\r\nconst data = [{\r\n    id: 1,\r\n    completed: true,\r\n    text: 'Jean-Claude Van Damme'\r\n}];\r\n\r\nstoriesOf('FilteredList')\r\n    .add('Nominal usage', () => (\r\n        <FilteredList items={data} changeMode={() => void 0}/>\r\n    ))\r\n    .add('Empty state', () => (\r\n        <FilteredList items={[]} changeMode={() => void 0}/>\r\n    ));\r\n\nSo what did I do here?\nI defined placeholder data in a variable for the component props.\nWe use the function storiesOf\u00a0from storybook, this function takes the name we want to give to the group of stories as entry param.\nThen we add some stories with .add. It is is pretty much working like jest or mocha\u2019s\u00a0describe or\u00a0it\u00a0in tests, it takes the name of the story and a function that returns the component to render.\nHere\u2019s what it looks like:\n\n\nIt\u2019s rather simple but it\u2019s working, we see the two different cases.\nWhat if we add other branches? Lets say the parent component of FilteredList\u00a0is calling an API to get the list and so we have to add a loading and error state.\n\r\nexport default function FilteredList(props) {\r\n    const {items, changeStatus, isLoading, error} = props;\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <StyledP>Loading...</StyledP>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <StyledP>Sorry an error occurred with the following message: {error}</StyledP>\r\n        )\r\n    }\r\n    \r\n    //...\r\n}\r\n\nNow we need to add the corresponding stories.\n\r\n.add('Loading state', () => (\r\n        <FilteredList items={[]} changeMode={() => void 0} isLoading />\r\n))\r\n.add('Error state', () => (\r\n    <FilteredList items={[]} changeMode={() => void 0} error=\"Internal server error\"/>\r\n));\r\n\nAnd now our Storybook looks like:\n\n\nThis example is rather simple but it is showing pretty well how we worked with Storybook. Each time you create new component behaviors you then create the corresponding stories.\nAin\u2019t nobody got time for that\nIn fact it takes time when you are coding but I feel like it is more like a investment.\nWhen you develop your app\u00a0aren\u2019t you trying to make it as easy to use? Then why not make it easy for developers to use your code?\nAnd that\u2019s where Storybook is helping you, now your components are easier to share, this leads to a better collaboration between developers and therefore to better component development practices shared inside the team.\nThis is very important because you are not the only user of your code, you\u2019re maybe working with a team or someone else will\u00a0take over\u00a0your project afterwards.\nWe all had this part in our project code that have been here for ages and no one really know how to deal with it, how to avoid that? Make it good the first time you code it! Seems obvious but still is right, and for that you can use Storybook to share your front end components and make perfect APIs! (or at least very good ones)\nFinal thoughts\nIn a way we are all trying to do reusable components \u2013 whether you are trying to do a library or not, you want other members of your team to be able to update/fix your code. It\u2019s not easy to make perfect APIs for your components if you can not have a lot of user feedback and that\u2019s why Storybook or any visual doc are so efficient. They improve greatly the vision others have of your component and help them modify it without breaking anything.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tL\u00e9o Anesi\r\n  \t\t\t\r\n  \t\t\t\tDeveloper at Theodo  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tIn this tutorial, you will see how to use ARjs on simple examples in order to discover this technology. You don\u2019t need any huge tech background in order to follow this tutorial.\n1 \u2013 Your very first AR example\nFirst we will start with a simple example that will help us understand all the elements we need to start an ARjs prototype.\nLibrary import\nAs I wished to keep it as simple as possible we will only use html static files and javascript libraries. Two external librairies are enough to start with ARjs.\nFirst we need A-Frame library, a web-framework for virtual reality. It is based on components that you can use as tag once defined.\nYou can import A-Frame library using the folowing line :\n<script src=\"https://aframe.io/releases/0.6.1/aframe.min.js\"></script>\r\n\nThen we need to import ARjs, the web-framework for augmented reality we are going to use.\n<script src=\"https://cdn.rawgit.com/jeromeetienne/AR.js/1.5.0/aframe/build/aframe-ar.js\"></script>\r\n\nInitialize the scene\nA-Frame works using a scene that contains the elements the user wants to display. To create a new scene, we use the a-scene tag :\n<a-scene stats embedded arjs='trackingMethod: best; debugUIEnabled: false'>\r\n  <!-- All our components goes here -->\r\n</a-scene>\r\n\nNote the 2 elements we have in our a-scene tag :\n\nstats : it displays stats about your application performance. You are free to remove it, but to start it will give us some useful information.\narjs : Here you can find some basic ARjs configuration. trackingMethod is the type of camera tracking you use, here we have choosen which is an auto configuration that will be great for our example. And debugUIEnabled is set at false in order to remove debugging tools from the camera view.\n\nShape\nThen we will use our first a-frame component. A-frame is built around a generic component a-entity that you use and edit to have the behaviour you want.\nIn this demo, we want to display a cube. Thankfully a components exists in A-frame, already implemented, that can be used to do that :\n<a-box position=\"0 0 0\" rotation=\"0 0 0\"></a-box>\r\n\na-box has a lot of attributes on which you can learn more in the official documentation, here we will focus on two attributes :\n\nposition : the three coordinates that will be used to position our components\nrotation : that color of the shape\n\nMarker\nWe are going to use a Hiro marker to start. It is a special kind of marker designed for augmented reality. We will dig deeper into other markers in one of the following part.\n\nDeployment\nAs announced we want to make our application accessible from a mobile device, so we will need to deploy our web page and make it accessible from our smartphone.\nhttp-server\nThere are a lot of node modules that you can use to start a development web server, I choose to use http-server which is very simple and can be used with a single command line.\nFirst you need to install the module by running the following command\nnpm install -g http-server\r\n\nThen to launch your server, you can do it with the command line :\nhttp-server\r\n\nYou can use other tools, such as the python based SimpleHTTPServer which is natively available on macOS with the following command:\npython -m SimpleHTTPServer 8000\r\n\nngrok\nNow that your server is running, you need to make your webpage accessible for your mobile device. We are going to use ngrok. It is a very simple command line tool that you can download from here : https://ngrok.com/download.\nThen you use ngrok with the following command :\nngrok http 8080\r\n\nIt will redirect all connections to the address : http://xxxxxx.ngrok.io, directly toward your server and your html page.\nSo with our index.html containing the following :\n<!doctype HTML>\r\n<html>\r\n<script src=\"https://aframe.io/releases/0.6.1/aframe.min.js\"></script>\r\n<script src=\"https://rawgit.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js\"></script>\r\n<script src=\"https://cdn.rawgit.com/jeromeetienne/AR.js/1.5.0/aframe/build/aframe-ar.js\"> </script>\r\n  <body style='margin : 0px; overflow: hidden;'>\r\n    <a-scene stats embedded arjs='trackingMethod: best;'>\r\n      <a-marker preset=\"hiro\">\r\n      <a-box position='0 1 0' material='color: blue;'>\r\n      </a-box>\r\n      </a-marker>\r\n      <a-entity camera></a-entity>\r\n    </a-scene>\r\n  </body>\r\n</html>\r\n\nOr if you prefer on codepen.\nAnd the result should look like :\n\n2 \u2013 Animation\nNow that we were able to display our first A-frame component, we want to make it move.\nA-frame contains a component a-animation that has been designed to animate an entity. As A-frame uses tag components, the a-animation has to be inside the entity tag that you want to animate :\n  <a-entity>\r\n    <a-animation></a-animation>\r\n  </a-entity>\r\n\na-animation can be used on various attributes of our entity such as position, rotation, scale or even color.\nWe will see in the next part what can be done with these attributes.\nBasics\nFirst we will focus on some basic elements that we will need but you will see that it is enough to do a lot of things.\n\ndur : duration of the animation\nfrom : start position or state of the animation\nto : end position or state of the animation\nrepeat : if and how the animation should be repeated\n\nPosition\nWe will begin with the position, we want our object to move from one position to another. To start with this animation, we only need a 3 dimension vector indicating the initial position and the final position of our object.\nOur code should look like this :\n<a-animation attribute=\"position\"\r\n    dur=\"1000\"\r\n    from=\"1 0 0\"\r\n    to=\"0 0 1\">\r\n</a-animation>\r\n\nRotation\nRotations work the same, except that instead of a vector you have to indicate three angles :\n<a-animation attribute=\"rotation\"\r\n    dur=\"2000\"\r\n    from=\"0 0 0\"\r\n    to=\"360 0 0\"\r\n    repeat=\"indefinite\">\r\n</a-animation>\r\n\nYou can either make your entity rotate on itself:\n\nYou can access the full code here.\nOr make it rotates around an object:\n\nAnd the full code is here.\nOthers properties\nThis animation pattern works on a lot of others properties, for example :\n\nScale :\n\n<a-animation\r\n    attribute=\"scale\"\r\n    to=\"2 2 3\">\r\n</a-animation>\r\n\n\nColor :\n\n<a-animation\r\n    attribute=\"color\"\r\n    to=\"red\">\r\n</a-animation>\r\n\nTrigger\na-animation has a trigger : begin. That can either be used with a delay or an event. For example :\n<a-animation\r\n    begin=\"3000\"\r\n    attribute=\"color\"\r\n    to=\"red\">\r\n</a-animation>\r\n\nThis animation will start in 3000ms.\nOtherwise with an event you can use :\n<a-entity id=\"entity\">\r\n<a-animation\r\n    begin=\"colorChange\"\r\n    attribute=\"color\"\r\n    to=\"red\">\r\n</a-animation>\r\n\nWith the event emission :\ndocument.querySelector('#entity').emit('colorChange');\r\n\nCombining\nYou can of course, use multiple animations either by having multiple entities with their own animations or by having imbricated entities that share animation.\nFirst case is very simple you only have to add multiple entities with an animation for each.\nSecond one is more difficult because you must add an entity inside an entity, like in this example :\n<a-entity>\r\n    <a-animation attribute=\"rotation\"\r\n      dur=\"2000\"\r\n      easing=\"linear\"\r\n      from=\"0 0 0\"\r\n      to=\"0 360 0\"\r\n      repeat=\"indefinite\"></a-animation>\r\n          <a-entity rotation=\"0 0 25\">\r\n              <a-sphere position=\"2 0 2\"></a-sphere>\r\n          </a-entity>\r\n</a-entity>\r\n\nThe first entity is used as the axis for our rotating animation.\n3 \u2013 Model loading\nType of models\nYou can also load a 3D model inside ARjs and project it on a marker. A-frame works with various models type but glTF is privilegied so you should use it.\nYou can generate your model from software like Blender. I have not so much experience in this area, but if you are interested you should give a look at this list of tutorials: https://www.blender.org/support/tutorials/\nYou can also use an online library to download models, some of them even allow you to directly use their models.\nLoading a model from the internet\nDuring the building of this tutorial, I found KronosGroup github that allow me to made my very first examples with 3d model. You can find all their work here : https://github.com/KhronosGroup/glTF-Sample-Models\nWe will now discover a new component from A-frame : a-asset. It is used to load your assets inside A-frame, and as you can guess our 3d model is one of our asset.\nTo load your 3d model, we will use the following piece of code :\n<a-assets>\r\n      <a-asset-item id=\"smiley\" src=\"https://cdn.rawgit.com/KhronosGroup/glTF-Sample-Models/9176d098/1.0/SmilingFace/glTF/SmilingFace.gltf\"></a-asset-item>\r\n</a-assets>\r\n\nYou can of course load your very own model the same way.\na-asset works as a container that will contain the a-asset-item you will need in your page. Those a-asset-item are used to load 3d model.\nThe full example look like this.\nDisplay your model\nNow that we have loaded our model, we can add it into our scene and start manipulating it. To do that we will need to declare an a-entity inside our a-scene that will be binded to the id of our a-asset-item. The code look like :\n<a-entity gltf-model=\"#smiley\" rotation= \"180 0 0\">\r\n</a-entity>\r\n\nRemember what we did in the previous part with animation. We are still working with a-entity so we can do the same here. The full code for our moving smiley is here.\nAnd here is a demo :\n\n4 \u2013 Markers\nFor now we only have used Hiro marker, now we will see how we can use other kind of marker.\nBarcode\nIn ARjs barcode are also implemented in case you need to have a lot of different marker without waiting to create them from scratch. You first need to declare in the a-scene component what kind of marker you are looking for :\n<a-scene arjs='detectionMode: mono_and_matrix; matrixCodeType: 5x5;'></a-scene>\r\n\nAs you can guess, our value will be found in a 5\u00d75 matrix. And now the a-marker component will look like :\n<a-marker type='barcode' value='5'></a-marker>\r\n\nCustom marker\nYou can also use your very own custom marker. Select the image you want, and use this tool developed by ARjs developer.\nYou can then download the .patt file and you can use it in your application, like this:\n<a-marker-camera type='pattern' url='path/to/pattern-marker.patt'></a-marker-camera>\r\n\nMultiple markers\n<script src=\"https://aframe.io/releases/0.6.0/aframe.min.js\"></script>\r\n<script src=\"https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.js\"></script>\r\n<body style='margin : 0px; overflow: hidden;'>\r\n  <a-scene embedded arjs='sourceType: webcam;'>\r\n\r\n    <a-marker type='pattern' url='path/to/pattern-marker.patt'>\r\n      <a-box position='0 0.5 0' material='color: red;'></a-box>\r\n    </a-marker>\r\n\r\n\r\n    <a-marker preset='hiro'>\r\n      <a-box position='0 0.5 0' material='color: green;'></a-box>\r\n    </a-marker>\r\n\r\n\r\n    <a-marker type='barcode' value='5'>\r\n      <a-box position='0 0.5 0' material='color: blue;'></a-box>\r\n    </a-marker>\r\n\r\n\r\n    <a-entity camera></a-entity>\r\n  </a-scene>\r\n</body>\r\n\nWhat\u2019s next\nYou now have everything you need to start and deploy a basic AR web application using ARjs.\nIf you are interested in web augmented or virtual reality you can give a deeper look at the A-Frame library so that you will see you can build more custom component or even component you can interact with.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tBastien Teissier\r\n  \t\t\t\r\n  \t\t\t\tWeb developer at Theodo  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tFor one of Theodo\u2019s clients, we built a complex website including a catalog, account management and the availability to order products.\nAs a result, the project was complex, with several languages (symfony, vue, javascript), utilities (docker, aws, webpack) and microservices (for the search of products, the management of accounts, the orders).\nThe impact of this complexity for the development teams was the numerous commands they had to use every day, and particularly to install the project.\nThus, and following Symfony 4 best practices, we decided to use make\u00a0on the project to solve these problems.\nAnd it worked!\nWhat is make\nMake is a build automation tool created in 1976, designed to solve dependency problems of the build process.\nIt was originally used to get compiled files from source code, for instance for C language.\nIn website development, an equivalent could be the installation of a project and its dependencies from the source code.\nLet me introduce a few concepts about make that we will need after.\nMake reads a descriptive file called Makefile, to build a target, executing some commands, and depending on a prerequisite.\nThe architecture of the Makefile is the following:\n\r\ntarget: [prerequisite]\r\n    command1\r\n    [command2]\r\n\nAnd you run make target in your terminal to execute the target\u00a0commands. Simple, right?\nUse it for project installation\nWhat is mainly used to help project installation is a README describing the several commands you need to run to get your project installed.\nWhat if all these commands were executed by running make install?\nYou would have your project working with one command, and no documentation to maintain anymore.\nI will only describe a simple way to build dependencies from your composer.json file\n\r\nvendor: composer.json\r\n    composer install\r\n\nThis snippet will build the vendor directory, running composer install, only if the vendor directory does not exist. Or if composer.json file has changed since the last time you built the vendor directory.\nNote that if you don\u2019t want to check the existency of a directory or a file named as your target, you can use a Phony Target. It means adding the line .PHONY: target to your Makefile.\nThere is much more you can do, and I won\u2019t talk about it here.\nBut if you want a nice example to convert an installation README\u00a0into a Makefile, you can have a look at these slides,\u00a0that are coming from a talk at Paris Symfony Live 2018.\nUse it for the commonly used commands you need on your project\nAfter the project installation, a complexity for the developer is to find the commands needed to develop features locally.\nWe decided to create a Makefile\u00a0to gather all the useful commands we use in the project on a daily basis.\nWhat are the advantages of this:\n\nThe commands are committed and versioned\nAll developers of the team are using the same, reviewed commands. -> there is no risk to forget one thing before executing a command line and break something\nIt is language agnostic -> which means you can start php jobs, javascript builds, docker commands, \u2026\nIt\u2019s well integrated with the OS -> for instance there is autocompletion for targets and even for options\nYou can use it for continuous improvement -> when a command fails for one dev, modify that command and commit the new version. It will never fail anymore!\n\nAuto-generate a help target\nBut after a long time, we started having a lot of commands.\nIt was painful to find the one you wanted in the file, and even to know the one that existed\nSo we added a new target help, in order to automatically generate a list of available commands from the comments in the Makefile.\nThe initial snippet we used is:\n\r\n.DEFAULT_GOAL := help\r\nhelp:\r\n    @grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) | awk 'BEGIN {FS = \":.*?## \"}{printf \"\\033[32m%-30s\\033[0m %s\\n\", $$1, $$2}' | sed -e 's/\\[32m##/[33m/'\r\n\nIf you add the following target and comments in your Makefile:\n\r\n## Example section\r\nexample_target: ## Description for example target\r\n        @does something\r\n\nIt would give this help message:\n\nThis generic, reusable snippet has another advantage: the documentation it generates is always up to date!\nAnd you can customize it to your need, for instance to display options associated to your commands.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tMartin Guillier\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tjest-each is a small library that lets you write jest test cases with just one line.\nIt was added to Jest in version 23.0.1 and makes editing, adding and reading tests much easier. This article will show you how a jest-each test is written with examples of where we use it on our projects.\nA simple example jest test for a currencyFormatter function looks like this:\ndescribe('currencyFormatter', () => {\r\n  test('converts 1.59 to \u00a31.59', () => {\r\n    const input = 1.59;\r\n    const expectedResult = \"\u00a31.59\"\r\n    expect(currencyFormatter(input)).toBe(expectedResult)\r\n  })\r\n  test('converts 1.599 to \u00a31.60', () => {\r\n    const input = 1.599;\r\n    const expectedResult = \"\u00a31.60\"\r\n    expect(currencyFormatter(input)).toBe(expectedResult)\r\n  })\r\n})\r\n\nThe currencyFormatter function takes in one number argument, input, and returns a string of the number to 2 decimal places with a \u00a3 prefix. Simple.\nBut, what if you want to add more test cases? Maybe you want your currencyFormatter to comma separate thousands, or handle non-number inputs in a certain way. With the standard jest tests above, you\u2019d have to add five more lines per test case.\nWith jest-each you can add new test cases with just one line:\ndescribe('currencyFormatter', () => {\r\n  test.each`\r\n    input     | expectedResult\r\n    ${'abc'}  | ${undefined}\r\n    ${1.59}   | ${'\u00a31.59'}\r\n    ${1.599}  | ${'\u00a31.60'}\r\n    ${1599}   | ${'\u00a31,599.00'}\r\n    // add new test cases here\r\n  `('converts $input to $expectedResult', ({ input, expectedResult }) => {\r\n    expect(currencyFormatter(input)).toBe(expectedResult)\r\n  })\r\n})\r\n\nThere are 4 parts to writing a jest-each test:\n\nThe first line in the template string:\n\ntest.each`\r\n  input | expectedResult\r\n...\r\n`\r\n\nThis defines the variable names for your test, in this case input and expectedResult. Each variable must be seperated by a pipe | character, and you can have as many as you want.\n\nThe test cases:\n\n`...\r\n  ${'abc'}  | ${undefined}\r\n  ${1.59}   | ${'\u00a31.59'}\r\n  ${1.599}  | ${'\u00a31.60'}\r\n  ${1599}   | ${'\u00a31,599.00'}\r\n  // add new test cases here\r\n`\r\n...\r\n\nEach line after the first represents a new test. The variable values are set to the relevant variable names in the first row and they are also seperated by a pipe | character.\n\nPrint message string replacement:\n\n('$input converts to $expectedResult', ...)\r\n\nYou can customise the print message to include variable values by prefixing your variable names with the dollar symbol $. This makes it really easy to identify which test case is failing when you run your tests. For example, the print messages for the example test above looks like this:\n\n\nPassing the variables into the test:\n\n('$input converts to $expectedResult', ({ input, expectedResult }) => {\r\n  expect(someFunction(input)).toBe(expectedResult)\r\n})\r\n\nAn object of variables is passed to the test as the first argument of the anonymous function where you define your test assertions. I prefer to deconstruct the object in the argument.\njest-each with Older Versions of Jest\nYou can still use jest-each with older versions of Jest by installing it independently:\nnpm install jest-each\r\n\nThere are a just two things that you\u2019ll need to do differently in your test files:\n\nImport jest-each at the top of your test file\nUse each``.test instead of test.each``\n\nThe currencyFormatter test above would look like this instead:\nimport each from 'jest-each'\r\n\r\n describe('currencyFormatter', () = {\r\n   each`\r\n     input     | expectedResult\r\n     ${1.59}   | ${'\u00a31.59'}\r\n     ${1.599}  | ${'\u00a31.60'}\r\n     // add new test cases here\r\n   `.test('converts $input to $expectedResult', ({ input, expectedResult }) => {\r\n    expect(currencyFormatter(input)).toBe(expectedResult)\r\n  })\r\n})\r\n\nAnd that\u2019s all there is to it! Now you have enough to start writing tests with jest-each!\njest-each Tests\nService Test Example\njest-each makes testing services, like a currencyFormatter, very quick and easy. It\u2019s also amazing for test driven development if that\u2019s how you like to develop. We have found it has been really useful for documenting how a service is expected to work for new developers joining a project because of how easy the test cases are to read.\nFor example:\nimport currencyFormatter from 'utils/currencyFormatter'\r\n\r\ndescribe('currencyFormatter', () => {\r\n  test.each`\r\n    input    | configObject | expectedResult | configDescription\r\n    ${'abc'} | ${undefined} | ${undefined}   | ${'none'}\r\n    ${5.1}   | ${undefined} | ${'\u00a35.10'}     | ${'none'}\r\n    ${5.189} | ${undefined} | ${'\u00a35.19'}     | ${'none'}\r\n    ${5}     | ${{dec: 0}}  | ${'\u00a35'}        | ${'dec: 0'}\r\n    ${5.01}  | ${{dec: 0}}  | ${'\u00a35'}        | ${'dec: 0'}\r\n    // add new test cases here\r\n  `('converts $input to $expectedResult with config: $configDescription',\r\n    ({ input, configObject, expectedResult} ) => {\r\n      expect(currencyFormatter(input, configObject)).toBe(expectedResult)\r\n    }\r\n  )\r\n})\r\n\nHere we have a slightly more complicated currencyFormatter function that takes an extra configObject argument. We want to test that:\n\nit returns undefined when input is not a number\nthe default number of decimal places is 2\nthat the configObject can set the number of decimal places with the dec key\n\nWe want to be able to identify the tests when they are running so we have also added a configDescription variable so we can add some text to the test\u2019s print message.\nHigher Order Component Test Example\nWe like to use jest-each to test and document the properties added to components by higher order components (HOCs). I\u2019ve found this simple test particularly helpful when refactoring our large codebase of HOCs, where it has prevented bugs on multiple occasions. We have even added a project snippet so that setting up this test for new HOCs is even easier:\nimport { shallow } from 'enzyme'\r\nimport HomePage from '/pages'\r\nimport isLoading from '/hocs'\r\n\r\nconst TestComponent = isLoading(HomePage)\r\n\r\ndescribe('wrapper', () => {\r\n  const component = shallow(<TestComponent/>)\r\n  test.each`\r\n    propName\r\n    ${'isLoading'}\r\n    // add new test cases here\r\n  `('wrapper adds $propName to the component', ({ propName }) => {\r\n    expect(Object.keys(component.props()).toContainEqual(propName)\r\n  })\r\n\r\n  test.each`\r\n    propName\r\n    ${'notThisProp'}\r\n    ${'orThisOne'}\r\n    // add new test cases here\r\n  `('wrapper does not add $propName to the component',\r\n    ({ propName }) => {\r\n      expect(Object.keys(component.props()).not.toContainEqual(propName)\r\n    }\r\n  )\r\n})\r\n\nSnapshot Branches Test Example\nYou can also test multiple snaphsot branches succintly by using jest-each:\nimport Button from '/components'\r\n\r\ndescribe('Component', () => {\r\n  const baseProps = {\r\n    disabled: false,\r\n    size: 'small',\r\n  }\r\n  test.each`\r\n    changedProps        | testText\r\n    ${{}}               | ${'base props'}\r\n    ${{disabled: true}} | ${'disabled = true'}\r\n    ${{size: 'large'}}  | ${'size = large'}\r\n    // add new test cases here\r\n  `('snapshot: $testText', ({ changedProps }) => {\r\n    const component = shallow(<Button {...baseProps} {...changedProps} />)\r\n    expect(component).toMatchSnaphot()\r\n  })\r\n})\r\n\nYou can learn more about snapshot tests here.\nThese three types of tests, plus some Cypress integration and end-to-end tests is enough for our current application\u2026 but that discussion is for another post.\nHappy testing with jest-each!\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tMike Riddelsdell\r\n  \t\t\t\r\n  \t\t\t\tDeveloper at Theodo  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tAt some point during the development of your React Native application, you will use a Modal. A Modal is a component that appears on top of everything.\nThere are a lot of cool libraries out there for modals, so today, we\u2019ll have a look a the best libraries for different use cases.\nClick on \u201cTap to play\u201d on the playground below to start:\n\n\nYou can experience the app on your phone here and check the code on github.\nBefore choosing a library, you have to\u00a0answer those\u00a02 questions:\n\nWhat do I want to display in the modal ?\nHow great do I want the UX to be ?\n\nTo answer the 2nd question, we list a few criteria that make a good UX :\n1\ufe0f\u20e3 The user can click on a button to close the modal\n2\ufe0f\u20e3 The user can touch the background to close the modal\n3\ufe0f\u20e3 The user can swipe the modal to close it\n4\ufe0f\u20e3 The user can scroll inside the modal\nI)\u00a0Alert\nFirst, if you\u00a0simply want to display some information and perform an action based on\u00a0the decision of your user, you should probably go with a\u00a0native Alert. An alert is enough and provides a much simpler and more expected UX. You can see how it will look like below.\n\nII) Native modal\nIf you want to show more information to your user, like a picture or a customised button, you need a Modal. The simplest modal is the React Native modal. It gives you the bare properties to show and close the modal 1\ufe0f\u20e3, so it is really easy to use \u2705. The downside is that it requires some effort to customise so as to improve the user experience \u274c.\n\r\nimport { Modal } from \"react-native\";\r\n...\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={true}\r\n          visible={this.state.modalVisible}\r\n          onRequestClose={this.closeModal} // Used to handle the Android Back Button\r\n        >\r\n\nIII) Swipeable Modal\nIf you want to improve the UX, you can allow the user to swipe the modal away. For example, if the modal comes from the top like a notification, it feels natural to close it by pulling it up \u2b06\ufe0f. If it comes from the bottom, the user will be surprised if they cannot swipe it down \u2b07\ufe0f. It\u2019s even better to highlight the fact that they can swipe the modal with a little bar with some borderRadius. The best library for that use case would be the react-native-modal library. It is widely customisable and answers to criteria 1\ufe0f\u20e3, 2\ufe0f\u20e3 and 3\ufe0f\u20e3.\n\r\nimport Modal from \"react-native-modal\";\r\n...\r\n        <Modal\r\n          isVisible={this.state.visible}\r\n          backdropOpacity={0.1}\r\n          swipeDirection=\"left\"\r\n          onSwipe={this.closeModal}\r\n          onBackdropPress={this.closeModal}\r\n        >\r\n\nIV) Scrollable modal\nSo far so good, now let\u2019s see some more complex use cases. For instance, you may want the content of the modal to be scrollable (if you are displaying a lot of content or a Flatlist). The scroll may conflict with either the scroll of the modal or the scroll of the container of the Modal, if it is a scrollable component. For this use case, you can still use the react-native-modal library. You will have 1\ufe0f\u20e3, 2\ufe0f\u20e3 and 4\ufe0f\u20e3. You can control the direction of the swipe with\u2026 swipeDirection.\n\r\nimport Modal from \"react-native-modal\";\r\n...\r\n        <Modal\r\n          isVisible={this.state.visible}\r\n          backdropOpacity={0.1}\r\n          onSwipe={this.closeModal}\r\n          // swipeDirection={\"left\"} <-- We can't specify swipeDirection since we want to scroll inside the modal\r\n          onBackdropPress={this.closeModal}\r\n        >\r\n\n\u26a0\ufe0f Don\u2019t try to combine swipeable + scrollable with this library. Instead continue reading\u2026\nV) Swipeable + Scrollable modal\nThe previous libraries are already awesome, but if you want your modal to answer criteria 1\ufe0f\u20e3, 2\ufe0f\u20e3, 3\ufe0f\u20e3and 4\ufe0f\u20e3, you need\u00a0react-native-modalbox. This library is still very easy to use \u2705and has everything out of the box \u2705, and is listed in the awesome libraries by awesome-react-native. The only downside is that the modal from this library always appear from the bottom, and you can only swipe it down \u274c.\n\r\nimport Modal from \"react-native-modalbox\";\r\n...\r\n        <Modal\r\n          style={styles.container}\r\n          swipeToClose={true}\r\n          swipeArea={20} // The height in pixels of the swipeable area, window height by default\r\n          swipeThreshold={50} // The threshold to reach in pixels to close the modal\r\n          isOpen={this.state.isOpen}\r\n          onClosed={this.closeModal}\r\n          backdropOpacity={0.1}\r\n        >\r\n\nTo avoid the collision between the scroll of your content and the swipe to close the modal, you have to specify swipeArea and swipeThreshold.\nConclusion\nThere are a lot of libraries built on top of the native modal. It is important to choose the right one depending on your needs. If you want to control the direction of the swipe, use react-native-modal, but if you want the modal to only come from the bottom, use react-native-modalbox.\nThe libraries I\u2019ve talked about are amazing. Thanks to their contributors.\n\nPlease reach out if you think I missed something.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tAntoine Garcia\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tAppCenter is a great CI platform for Mobile Apps. At Theodo we use it as the standard tool for our react-native projects.\nIn a recent project, we needed to have a shared NPM package between the React and React-Native applications. There is no mention of how to achieve this in the AppCenter documentation, and if you ask their support they will say it\u2019s not possible.\nMe: Hello, we\u2019re wanting to have a shared library used in our project. This would require an npm install from a private NPM repo (through package cloud). What is the best practice for adding a private npm access on the AppCenter CI?\nMicrosoft: We currently only support cloud git repositories hosted on VSTS, Bitbucket and GitHub. Support for private repos is not available yet but we are building new features all the time, you can keep an eye out on our roadmap for upcoming features.\nLuckily there is a way!\n\nAppCenter provides the ability to add an `appcenter-post-clone.sh` script to run after the project is cloned. To add one, just add a file named `appcenter-post-clone.sh`, push your branch and, on the configure build screen, see it listed.\n\nPro Tip: You need to press \u201cSave and Build\u201d on the build configuration after pushing a new post-clone script on an existing branch.\nNow, what to put in the script?\nHaving a .npmrc in the directory you run \u2018npm install\u2019 or \u2018yarn install\u2019 from allows you to pass authentication tokens for new registries.\nWe want a .npmrc like this:\n\r\nalways-auth=true\r\nregistry=https://YOUR_PACKAGE/NAME/:_authToken=XXXXXXXX\r\n\nObviously, we don\u2019t really want to commit our read token to our source code, therefore we should use an environment variable.\nSo we can add to our post-clone script:\n\r\ntouch .npmrc\r\necho \"always-auth=true\r\nregistry=https://YOUR_PACKAGE/NAME/:_authToken=${READ_TOKEN}\" > .npmrc\r\n\nNow, on AppCenter, we can go into the build configuration and add an environment variable called \u2018READ_TOKEN\u2019.\n\nNow rebuild your branch and your package installs should pass.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tBen Ellerby\r\n  \t\t\t\r\n  \t\t\t\tI'm an Architect Developer, working with startups to launch MVP's and large corporates to deliver in startup speed. \r\n\r\nI'm tech at heart, loving to code, participating in hackathons, guest lecturing as part of the University of Southampton CompSci course and acting as a tech advisor to multiple startups.\r\n\r\nhttps://www.linkedin.com/in/benjaminellerby/  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tThrough my experiences, I encountered many fellow coworkers that found CSS code painful to write, edit and maintain. For some people, writing CSS is a chore. One of the reasons for that may be that they have never been properly taught how to write good CSS in the first place, nor what is good CSS. Thus it has an impact on their efficiency and on the code quality, which isn\u2019t what we want. This two parts article will focus on:\n\nPart 1: What is good CSS code? (more precisely, what is not good CSS). I will focus on actionable tips and tricks to avoid creating technical debt starting now.\nPart 2: how to migrate from a complex legacy stylesheet to a clean one.\n\nWarning: these are the guidelines that I gathered through my experiences and that worked well for many projects I worked on. In the end, adopt the methods that fit your needs.\nRequirements\nI assume that you are looking for advice to improve yourself at writing CSS, thus you have a basic knowledge of CSS and how it works. In addition, you will need these things:\nA definition of done\nYou should be very clear about which browser/devices you want to support or not. You must list browsers/devices you want to support and stick to it. Here is an example of what can be a definition of done:\n\nBrowsers: Chrome \u2265 63, Firefox \u2265 57, Edge \u2265 12\nDevices: laptops with resolution \u2265 1366*768\n\nYou must write this list with a business vision: maybe your business needs IE support because 20% of your users are using it. You can be specific for some features. For instance: the landing page should work on devices with small screens but the app behind the login should not.\nBut if your Definition Of Done does not include IE9, do not spend unnecessary time fixing exotic IE9 bugs. From there you can use caniuse.com to see which CSS features are supported on your target browsers (example below).\n\nA good understanding of what specificity is\nHere is a quick reminder about what is specificity:\nSpecificity determines which CSS rule is applied by the browsers. If two selectors apply to the same element, the one with higher specificity wins.\nThe rules to win the specificity wars are:\n\nInline style beats ID selectors. ID selectors are more specific than classes and attributes (::hover,\u00a0::before\u2026). Classes win over element selectors.\nA more specific selector beats any number of less specific selectors. For instance,\u00a0.list\u00a0is more specific than\u00a0div ul li.\nIncreasing the number of selectors will result in higher specificity. .list.link\u00a0is more specific than\u00a0.list and .link.\nIf two selectors have the same specificity, the last rule read by the browser wins.\nAlthough !important\u00a0has nothing to do with the specificity of a selector, it is good to know that a declaration using !important overrides any normal declaration. When two conflicting declarations have the !important keyword, the declaration with a greater specificity wins.\n\nHere is a good website to compute the specificity of a selector:\u00a0Specificity Calculator. Below is a chart to recap all these rules (taken from this funny post on specificity).\n\nSome basic knowledge of preprocessors\nPreprocessors are great because they allow you to write CSS faster. They also help to make the code more understandable and customizable by using variables. Here I will use a SCSS syntax in the examples (my favorite preprocessor but others like LESS/Stylus are pretty similar). An example of what you can do with preprocessors:\n// vars.scss\r\n$messageColor: #333;\r\n\r\n// message.scss\r\n@import 'vars';\r\n%message-shared {\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    color: $messageColor;\r\n}\r\n\r\n.message {\r\n    @extend %message-shared;\r\n}\r\n.success {\r\n    @extend %message-shared;\r\n    border-color: green;\r\n}\r\n\nVariables in CSS can now be done with native CSS but preprocessors still have the upper hand on readability/usability.\nWhat you should not do\nI will show you what you DON\u2019T want to do and explain why such coding practices will lead to many problems over time.\nDon\u2019t write undocumented CSS\nI put this point first because I believe it\u2019s one of the most impactful things you can act on straightaway. Like any other language, CSS needs to be commented. Most stylesheets don\u2019t have comments. And when I advise you to write comments, I don\u2019t talk about this:\n// Header style\r\n.header {}\r\n\nThose are bad comments because they have no purpose and convey no additional information. A good CSS comment explains the intention behind a selector/rule. Here is an example of some good comments:\n.suggestions {\r\n    // 1 should be enough but in fact there is a Bootstrap rule that says\r\n    // .btn-group>.btn:hover z-index: 2 (don't ask me why they did this)\r\n    z-index: 3;\r\n}\r\n\r\n// Firefox doesn't respect some CSS3 specs on the box model rules\r\n// regarding height. This is the only cross-brower way to do an \r\n// overflowing-y child in a fixed height container.\r\n// See https://blogs.msdn.microsoft.com/kurlak/2015/02/20/filling-the-remaining-height-of-a-container-while-handling-overflow-in-css-ie8-firefox-chrome-safari/\r\n.fixed-height-container {}\r\n\nWhat should you comment on?\n\nCSS hacks\nEvery line you didn\u2019t write or you wrote 6 months ago (which is the same) where you needed more than 10 seconds to understand its intended purpose.\nMagic values. Speaking of which\u2026\n\nDon\u2019t use magic values\nThe most common thing between developers resenting CSS is a general feeling of black magic. Put a rule here and an !important there, with a width value that looks good and it works. You see? Magic. But magic doesn\u2019t exist. You should have a more scientific approach to demystify CSS. Writing good comments is one thing. Stopping writing magic values is another.\nI define a magic value by \u201cany value that looks weird, aka is not a multiple of 5\u201d \u2013 even then some values may look weird. Examples of magic values are:\nleft: 157px;\r\nheight: 328px;\r\nz-index: 1501;\r\nfont-size: 0.785895rem;\r\n\nWhy are these values problematic? Because again, they do not convey the intention. What is better:\n\nUsing preprocessor variables which adds a meaning to a number.\nMake the exact calculation. If you wrote this value after some tests using the Chrome dev tools you may find out with a scientific approach that your initial \u201cmagic\u201d value may not be the most accurate one.\nCommenting the value to explain why it\u2019s here.\nChallenging your value/unit and changing it to a more pertinent one.\n\nExample:\nleft: calc(50% - ($width / 2));\r\n// An item have a 41px height:\r\n// 2*10px from padding+20px from line-height+1px from one border.\r\n// So to get 8 items in height:\r\nheight: 8 * 41px;\r\nz-index: 1501; // Needs to be above .navbar\r\nfont-size: 0.75rem;\r\n\nDon\u2019t use px units everywhere\nMost hellish CSS stylesheets use px units everywhere. In fact, you should almost never use them. In most cases, pixels never is the good unit to use. Why? Because they don\u2019t scale with the font-size or the device resolution. Here is a recap of which unit to use depending on the context. Quick cheat sheet:\n\npx: do not scale. Use for borders and the base font size on the html element. That\u2019s all.\nem, rem (> IE8): scale with the font-size. 1.5em is 150% of the font size of the current element. 0.75rem is 75% of the font size of the html element. Use rem for typography and everything vertical like margins and paddings. Use em wisely for elements relative to the font-size (icons as a font for instance) and use it for media query breakpoints.\n%, vh, vw (> IE8): scale with the resolution. vh and vw are percentages of the viewport height and width. These units are perfect for layouts or in a calc to compute the remaining space available (min-height: calc(100vh - #{$appBarHeight})).\n\nI made a page for you to play with the base font-size and CSS units (open in a new window to resize the viewport and try changing the zoom setting).\nDon\u2019t use !important\nYou should keep your specificity as low as possible. Otherwise, you will be overriding your override rules. If you tend to override your styles, with time passing you will hit the hard ceiling \u2013 !important and inline style. Then it will be a nightmare to create more specific CSS rules.\nUsing !important is a sign that you\u2019re working against yourself. Instead, you should understand why you have to do this. Maybe refactoring the impacted class will help you, or decoupling the common CSS in another class would allow you not to use it and lower your specificity.\nThe only times you should use it is when there is absolutely no other way to be more specific than an external library you are using.\nDon\u2019t use IDs as selectors\nKeep. Your. Specificity. Low. Using an ID instead of a class condemn you to not reuse the code you\u2019re writing right now. Furthermore, if your javascript code is using IDs as hooks it could lead to dead code (you are not certain whether you can remove this ID because it could be used by the JS and/or CSS).\nInstead of using IDs, try to look up common visual patterns you could factorize for future reuse. If you need to be specific, add a class on the lowest level of the DOM tree possible. At the very least, use a class with the name you would have given to your ID.\n// Don't\r\n#app-navbar {}\r\n\r\n// Slighlty better\r\n.app-navbar {}\r\n\r\n// Better (pattern that you could reuse)\r\n.horizontal-nav {}\r\n\nDon\u2019t use HTML elements as selectors\nAgain. Keep your specificity low. Using HTML tags as selectors goes against this because you will have to add higher-specificity selectors to overwrite them later on. For instance, styling the a element (especially the a element, with all its use cases and different states) will be an inconvenience when you use it in other contexts.\n// Don't\r\n<a>Link</a>\r\n<a class=\"button\">Call to action</a>\r\n<nav class=\"navbar\"><a>Navbar link</a></nav>\r\na { ... }\r\n.button { ... }\r\n// Because you will have to create more specific selectors\r\na.button { ...overrides that have nothing to do with the button style... }\r\n.navbar a { ...same... }\r\n\r\n// Better\r\n<a class=\"link\">Link</a>\r\n<a class=\"button\">Call to action</a>\r\n<nav class=\"navbar\"><a class=\"navbar-link\">Navbar link</a></nav>\r\n.link { ...style of a link, can be used anywhere... }\r\n.button { ...style of a button, idem... }\r\n.navbar-link { ...style of a navbar link, used only in navbars... }\r\n\nHowever, there are some cases when you could use them, for instance when a user wrote something like a blog post that is output in pure HTML format (therefore preventing you from adding custom classes).\n// Don't\r\nul { ... }\r\n\r\n// Better\r\n%textList { ... }\r\n.list { @extends %textList; }\r\n.user-article {\r\n    ul { @extends %textList; }\r\n}\r\n\nFurthermore, HTML should be semantic and the only hooks for style should be the classes. Don\u2019t be tempted to use an HTML tag because it has some style attached to it.\nA side-note on the ideal specificity\nYou should aim for a specificity of only one class for your CSS selectors.\nThe best part in Cascading Style Sheets is \u201ccascading\u201d. The worst part in Cascading Style Sheets is \u201ccascading\u201d \u2014 The Internet\nThe whole thing about CSS is that you want to make your style the same everywhere (therefore it needs to be reusable) AND you want to make it different in some unique places (therefore it needs to be specific). All CSS structure issues are variations of this basic contradiction.\nOpinion: The Cascading effect of CSS can be a great tool and it serves a purpose: to determine which CSS declaration is applied when there is a conflict. But it is not the best tool to solve this problem. What if instead, there were no conflicts on CSS declarations, ever? We wouldn\u2019t need the Cascade effect and everything would be reusable. Even \u201csuper-specific\u201d code can be written as a class that will be used only once. If you use selectors of only one class, you will never need to worry about specificity and overwriting styles between components.\n\u201cBut that could lead to a lot of duplicated source code\u201d, you could say. And you would be right if there were no CSS preprocessors. With preprocessors, defining mixins to reuse bits of CSS by composition is a great way to factor your code without using more specific selectors.\nThere is still a concern over performance because the output stylesheet is bigger. But for most stylesheets/projects, CSS performance is irrelevant over javascript concerns. Furthermore, the advantage of maintainability far outweighs the performance gains.\nIf we try to combine the last three Don\u2019ts, this is how I would take this code:\n<main id=\"main_page\">\r\n    <p><a>Some link</a></p>\r\n    <footer>\r\n        <a>Some other link</a>\r\n    </footer>\r\n</main>\r\n\r\na {\r\n    cursor: pointer;\r\n}\r\n\r\n#main_page {\r\n    a {\r\n        color: blue;\r\n\r\n        &:hover {\r\n            color: black;\r\n        }\r\n    }\r\n}\r\n\r\nfooter {\r\n    border: 1px solid black;\r\n\r\n    a {\r\n        color: grey !important;\r\n    }\r\n}\r\n\nAnd turn it into this:\n<main>\r\n    <p><a class=\"link\">Some link</a></p>\r\n    <footer class=\"footer\">\r\n        <a class=\"footer-link\">Some other link</a>\r\n    </footer>\r\n</main>\r\n\r\n.link {\r\n    cursor: pointer;\r\n    color: blue;\r\n\r\n    &:hover {\r\n        color: black;\r\n    }\r\n}\r\n\r\n.footer {\r\n    border: 1px solid black;\r\n\r\n    &-link {\r\n        // You can use a mixin here if there is a need to factor in\r\n        // the common code with .link\r\n        cursor: pointer;\r\n        color: grey;\r\n    }\r\n}\r\n\nWhat you can do right now\nDo try to understand how CSS declarations really work\nThere are some declarations you really want to understand. Because if you don\u2019t there will still be a feeling of \u201cblack magic\u201d happening.\n\nvertical-align: middle; margin: 0 auto; all the things!\nWhat you should know (tip: if you think you would not be able to explain it clearly to someone else, click the links):\n\nThe box model (width, height, padding, margin, border, box-sizing, display: block/inline/inline-block).\nPositioning and positioning contexts (position: static/relative/absolute/fixed, z-index).\nTypography (font-size, font-weight, line-height, text-transform, text-align, word-break, text-overflow, vertical-align)\nSelectors (*, >, +, ::before, ::after, :hover, :focus, :active, :first-child, :last-child, :not(), :nth-child())\n\nBonus ones to go further:\n\nA complete guide to tables\nTransitions\nShadows & filters\nFloats (only if you have to. My advice would be: don\u2019t use floats).\n\nDo look at Flexbox and Grid\nIf your Definition of Done doesn\u2019t include older browsers and you don\u2019t use/know the flexbox and/or grid model, it will solve a lot of your layout problems. You may want to check these great tutorials:\n\nA complete guide to Flexbox (Chrome \u2265 21, Firefox \u2265 28, IE \u2265 10, Safari \u2265 6.1)\nA complete guide to Grid (Chrome \u2265 57, Firefox \u2265 52, IE \u2265 10, Safari \u2265 10.3), a short example of grid use\n\nAn example of a possible layout implementation possible with Grid and that is not a nightmare to implement:\n\nDo look at BEM and CSS modules/styled components and apply it to new components\nYou should use CSS guidelines such as BEM. It will make your code more maintainable/reusable and prevent you from going down into the specificity hell. Here is a great article on BEM which I recommend.\nFurthermore, if you have a component-based architecture (such as React, Vue or Angular), I recommend CSS modules or styled components to remove the naming hassle of BEM (here is an article on the whole topic).\nOpinion: there is one main gotcha with these tools. You may believe that the auto-scoping feature of these tools acts as a pseudo-magic protection. However, beware that you should not bypass the above Don\u2019ts. For instance, using HTML elements in CSS modules selectors destroys the purpose of auto-scoping because it will cascade to all children components. You should also keep a strict BEM-like approach (structuring your component styles into blocks, elements, and modifiers) while using these kinds of tools.\nDo challenge and remove useless CSS\nA lot can be done by using only seven CSS properties. Do challenge CSS that does not seems essential. Is this linear-gradient background color essential when nobody sees the gradient effect? Are those box-shadow declarations really useful?\nYou can also find unused CSS with Chrome\u2019s CSS coverage. In the \u201cMore tools\u201d drop-down, activate the \u201cCoverage\u201d tool, start recording and crawl your target pages. Here is an example showing that the .TextStat class is never used, as well as 70% of the whole stylesheet.\n\nDo it yourself\nA note on frameworks like Bootstrap and others: they are useful for small and quick projects when you don\u2019t have time to dedicate to style. But for many medium-sized and a lot of large-sized projects, don\u2019t use them.\nOver time, you will need to overwrite them and it will eventually take more time than doing it yourself because it will produce a more complex and more specific code.\nIn addition, doing your style yourself makes you learn a lot. UI designer is a whole job so creating a UI from scratch is a real challenge. At first, try to reproduce the same look and feel than other websites you like (you can look at the code with the browser dev tools). My personal experience is that I started to love and learn CSS the moment I threw Bootstrap out the window for a personal project and started writing my own style.\n\nI hope that with all the above best practices you will feel more comfortable writing CSS and that it will help you enhance your code quality. In Part 2 I will address the hassle of migrating a hellish complex stylesheet full of black magic to a clean, understandable and maintainable one. So don\u2019t hesitate to share your CSS horror stories!\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tAlb\u00e9ric Trancart\r\n  \t\t\t\r\n  \t\t\t\tAlb\u00e9ric Trancart is an agile web developer at Theodo. He loves sharing what he has learnt and exchanging with great people.  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tWhy?\nAdding upload fields in Symfony application eases the way of managing assets. It makes it possible to upload public assets as well as sensitive documents instantly without any devops knowledge. Hence, I\u2019ll show you a way of implementing a Symfony / Amazon AWS architecture to store your documents in the cloud.\nSetup Symfony and AWS\nFirst you need to setup both Symfony and AWS to start storing some files from Symfony in AWS buckets.\nAmazon AWS\nCreating a bucket on Amazon AWS is really straight forward. First you need to sign up on Amazon S3 (http://aws.amazon.com/s3). Go to the AWS console and search S3. Then click on Create a bucket.\nFollow bucket creation process choosing default values (unless you purposely want to give public access to your documents, you should keep your bucket private). Eventually create a directory for each of your environments. Your AWS S3 bucket is now ready to store your documents.\nSymfony\nNow you need to setup Symfony to be able to store files and to communicate with Amazon AWS. You will need 2 bundles and 1 SDK to set it up:\n\nVichUploader (a bundle that will ease files upload)\nKNP/Gauffrette (a bundle that will provide an abstraction layer to use uploaded files in your Symfony application without requiring to know where those files are actually stored)\nAWS-SDK (A SDK provided by Amazon to communicate with AWS API)\n\nInstall the two bundles and the SDK with composer:\n\r\ncomposer require vich/uploader-bundle\r\ncomposer require aws/aws-sdk-php\r\ncomposer require knplabs/knp-gaufrette-bundle\r\n\r\n\nThen register the bundles in AppKernel.php\n\r\npublic function registerBundles()\r\n    {\r\n     return [\r\n            \tnew Vich\\UploaderBundle\\VichUploaderBundle(),\r\n            \tnew Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle(),\r\n            ];\r\n    }\r\n\r\n\nBucket parameters\nIt is highly recommended to use environment variables to store your buckets parameters and credentials. It will make it possible to use different buckets depending on your environment and will prevent credentials from being stored in version control system. Hence, you won\u2019t pollute your production buckets with test files generated in development environment.\nYou will need to define four parameters to get access to your AWS bucket:\n\nAWS_BUCKET_NAME\nAWS_BASE_URL\nAWS_KEY (only for and private buckets)\nAWS_SECRET_KEY (only for and private buckets)\n\nYou can find the values of these parameters in your AWS console.\nConfiguration\nYou will have to define a service extending Amazon AWS client and using your AWS credentials.\nAdd this service in services.yml:\n\r\nct_file_store.s3:\r\n        class: Aws\\S3\\S3Client\r\n        factory: [Aws\\S3\\S3Client, 'factory']\r\n        arguments:\r\n            -\r\n                version: YOUR_AWS_S3_VERSION (to be found in AWS console depending on your bucket region and version)\r\n                region: YOUR_AWS_S3_REGION\r\n                credentials:\r\n                    key: '%env(AWS_KEY)%'\r\n                    secret: '%env(AWS_SECRET)%'\r\n\r\n\nNow you need to configure VichUploader and KNP_Gaufrette in Symfony/app/config/config.yml. Use the parameters previously stored in your environment variables.\nHere is a basic example:\n\r\nknp_gaufrette:\r\n    stream_wrapper: ~\r\n    adapters:\r\n        document_adapter:\r\n            aws_s3:\r\n                service_id: ct_file_store.s3\r\n                bucket_name: '%env(AWS_BUCKET)%'\r\n                detect_content_type: true\r\n                options:\r\n                    create: true\r\n                    directory: document\r\n    filesystems:\r\n        document_fs:\r\n            adapter:    document_adapter\r\n\r\nvich_uploader:\r\n    db_driver: orm\r\n    storage: gaufrette\r\n    mappings:\r\n        document:\r\n            inject_on_load: true\r\n            uri_prefix: \"%env(AWS_BASE_URL)%/%env(AWS_BUCKET)%/document\"\r\n            upload_destination: document_fs\r\n            delete_on_update:   false\r\n            delete_on_remove:   false \r\n\r\n\nUpload files\nFirst step in our workflow is to upload a file from Symfony to AWS. You should create an entity to store your uploaded document (getters and setters are omitted for clarity, you will need to generate them).\nThe attribute mapping in $documentFile property annotation corresponds to the mapping defined in config.yml. Don\u2019t forget the class attribute @Vich\\Uploadable().\n\r\nnamespace MyBundle\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Component\\HttpFoundation\\File\\File;\r\nuse Vich\\UploaderBundle\\Mapping\\Annotation as Vich;\r\n\r\n/**\r\n * Class Document\r\n *\r\n * @ORM\\Table(name=\"document\")\r\n * @ORM\\Entity()\r\n * @Vich\\Uploadable()\r\n */\r\nclass Document\r\n{\r\n    /**\r\n     * @var int\r\n     *\r\n     * @ORM\\Column(type=\"integer\", name=\"id\")\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\r\n     */\r\n    private $id;\r\n\r\n    /**\r\n     * @var string\r\n     *\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    private $documentFileName;\r\n\r\n    /**\r\n     * @var File\r\n     * @Vich\\UploadableField(mapping=\"document\", fileNameProperty=\"documentFileName\")\r\n     */\r\n    private $documentFile;\r\n\r\n    /**\r\n     * @var \\DateTime\r\n     *\r\n     * @ORM\\Column(type=\"datetime\")\r\n     */\r\n    private $updatedAt;\r\n}\r\n\r\n\nThen you can add an uploaded document to any of your entities:\n\r\n     /**\r\n     * @var Document\r\n     *\r\n     * @ORM\\OneToOne(\r\n     *     targetEntity=\"\\MyBundle\\Entity\\Document\",\r\n     *     orphanRemoval=true,\r\n     *     cascade={\"persist\", \"remove\"},\r\n     * )\r\n     * @ORM\\JoinColumn(name=\"document_file_id\", referencedColumnName=\"id\", onDelete=\"SET NULL\")\r\n     */\r\n    private $myDocument;\r\n\r\n\nCreate a form type to be able to upload a document:\n\r\nclass UploadDocumentType extends AbstractType\r\n{\r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n        add('myDocument', VichFileType::class, [\r\n                'label'         => false,\r\n                'required'      => false,\r\n                'allow_delete'  => false,\r\n                'download_link' => true,\r\n            ]);\r\n    }\r\n...\r\n}\r\n\r\n\nUse this form type in your controller and pass the form to the twig:\n\r\n...\r\n$myEntity = new MyEntity();\r\n$form = $this->createForm(UploadDocumentType::class, $myEntity);\r\n...\r\nreturn [ 'form' => $form->createView()];\r\n\r\n\nFinally, add this form field in your twig and you should see an upload field in your form:\n\r\n<div class=\"row\">\r\n    <div class=\"col-xs-4\">\r\n        {{ form_label(form.myDocument) }}\r\n    </div>\r\n    <div class=\"col-xs-8\">\r\n        {{ form_widget(form.myDocument) }}\r\n    </div>\r\n    <div class=\"col-xs-8 col-xs-offset-4\">\r\n        {{ form_errors(form.myDocument) }}\r\n    </div>\r\n</div>\r\n\r\n\nNavigate to your page, upload a file and submit your form. You should now be able to see this document in your AWS bucket.\nUsers are now able to upload files on your Symfony application and these documents are safely stored on Amazon AWS S3 bucket. The next step is to provide a way to download and display these documents from AWS in your Symfony application.\nDisplay or download documents stored in private buckets\nIn most cases, your files are stored in private buckets. Here is a step by step way to safely give access to these documents to your users.\nGet your document from private bucket\nYou will need a method to retrieve your files from your private bucket and display it on a custom route. As a result, users will never see the actual route used to download the file. You should define this method in a separate service and use it in the controller.\ns3PrivateClient is the service we defined previously extending AWS S3 client. You will need to inject your bucket name from your environment variables in this service. my-documents/ is the folder you created to store your documents.\n\r\n     /**\r\n     * @param string $documentName\r\n     *\r\n     * @return \\Aws\\Result|bool\r\n     */\r\n    public function getDocumentFromPrivateBucket($documentName)\r\n    {\r\n        try {\r\n            return $this->s3PrivateClient->getObject(\r\n                [\r\n                    'Bucket' => $this->privateBucketName,\r\n                    'Key'    => 'my-documents/'.$documentName,\r\n                ]\r\n            );\r\n        } catch (S3Exception $e) {\r\n            // Handle your exception here\r\n        }\r\n    }\r\n\r\n\nDefine an action with a custom route:\nYou will need to use the method previously defined to download the file from AWS and expose it on a custom route.\n\r\n     /**\r\n     * @param Document $document\r\n     * @Route(\"/{id}/download-document\", name=\"download_document\")\r\n     * @return RedirectResponse|Response\r\n     */\r\n    public function downloadDocumentAction(Document $document)\r\n    {\r\n        $awsS3Uploader  = $this->get('app.service.s3_uploader');\r\n\r\n        $result = $awsS3Uploader->getDocumentOnPrivateBucket($document->getDocumentFileName());\r\n\r\n        if ($result) {\r\n            // Display the object in the browser\r\n            header(\"Content-Type: {$result['ContentType']}\");\r\n            echo $result['Body'];\r\n\r\n            return new Response();\r\n        }\r\n\r\n        return new Response('', 404);\r\n    }\r\n\r\n\nDownload document\nEventually add a download button to access a document stored in a private bucket directly in your Symfony application.\n\r\n<a href=\"{{ path('/download-document', {'id': document.id}) }}\" \r\n                   target=\"_blank\">\r\n   <i class=\"fa fa-print\">\r\n   {{ 'label_document_download'|trans }}\r\n</a>\r\n\r\n\nPublic assets\nYou may want to display some assets from Amazon AWS in public pages of your application. To do so, use a public bucket to upload these assets. It is quite straight forward to access it to display them. Be conscious that anyone will be able to access these files outside your application.\n\r\n<img src=\"{{ vich_uploader_asset(myEntity.myDocument, 'documentFile') }}\" alt=\"\" />\r\n\r\n\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tAlan Rauzier\r\n  \t\t\t\r\n  \t\t\t\tDeveloper at Theodo  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tUsually, we are completely running React.js on client-side: Javascript is interpreted by your browser. The initial html returned by the server contains a placeholder, e.g.\u00a0<div id=\"root\"></div>, and then, once all your scripts are loaded, the entire UI is rendered in the browser. We call it client-side rendering.\nThe problem is that, in the meantime, your visitor sees\u2026 nothing, a blank page!\nLooking for how to get rid of this crappy blank page for a personal project, I discovered Next.js: in my opinion the current best framework for making server-side rendering and production ready React applications.\nWhy SSR (Server-Side Rendering)?\nThis is not the point of this article, but here is a quick sum-up of what server-side rendering can bring to your application:\n\nImprove your SEO\nSpeed up your first page load\nAvoid blank page flicker before rendering\n\nIf you want to know more about it, please read this great article: Benefits of Server-Side Over Client Side Rendering.\nBut let\u2019s focus on the \u201chow\u201d rather than the \u201cwhy\u201d here.\nWhat\u2019s the plan?\nFor this article, I start with a basic app made\u00a0with\u00a0create-react-app. Your own React application is probably using similar settings.\nThis article is split in 3 sections matching 3 server-side-rendering strategies:\n\nHow tomanually upgrade your React app to get\u00a0SSR\nHow to start with Next.js from scratch\nMigrate your existing React app to server-side with Next.js\n\nI won\u2019t go through all the steps, but I will bring your attention on the main points of interesting. I also provide a repository for each of the 3 strategies. As the article is a bit long, I\u2019ve split it in 2 articles, this one will only deal with the first 2 sections. If your main concern is to migrate your app to Next.js, you can go directly to the second article\u00a0(coming soon).\n1) Look how twisted manual SSR is\u2026\n\nIn this part, we will see how to implement Server-side Rendering\u00a0manually on an existing React app. Let\u2019s take the\u00a0create-react-app\u00a0starter code:\n\npackage.json\u00a0for dependencies\nWebpack configuration included\nApp.js\u00a0\u2013 loads React and renders the Hello component\nindex.js\u00a0\u2013 puts all together into a root component\n\nChecking rendering type\nI just added to the code base a simple function\u00a0isClientOrServer\u00a0based on the availability of\u00a0the Javascript object window representing the browser\u2019s window:\nconst isClientOrServer = () => {\r\n  return (typeof window !== 'undefined' && window.document) ? 'client' : 'server';\r\n};\r\n\nso that we display on the page what is rendering the application: server or client.\nTest it by yourself\n\nclone\u00a0this repository\ncheckout the initial commit\ninstall the dependencies with\u00a0yarn\nlaunch the dev server with\u00a0yarn start\nbrowse to\u00a0http://localhost:3000\u00a0to view the app\n\nI am now simulating a \u20183G network\u2019 in Chrome so that we really understand what is going on:\n\nImplementing\u00a0Server-side Rendering\nLet\u2019s fix that crappy flickering with server-side rendering! I won\u2019t show all the code (check the repo to see it in details) but here are the main steps.\nWe first need a node server using Express:\u00a0yarn add express.\nIn our React app, Webpack only loads the src/ folder, we can thus create a new folder named server/ next to it. Inside, create a file\u00a0index.js\u00a0where we use express and a server renderer.\n// use port 3001 because 3000 is used to serve our React app build\r\nconst PORT = 3001; const path = require('path');\r\n\r\n// initialize the application and create the routes\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\n// root (/) should always serve our server rendered page\r\nrouter.use('^/$', serverRenderer);\r\n\nTo render our html, we use a server renderer that is replacing the root component with the built html:\n// index.html file created by create-react-app build tool\r\nconst filePath = path.resolve(__dirname, '..', '..', 'build', 'index.html');\r\n\r\nfs.readFile(filePath, 'utf8', (err, htmlData) => {\r\n  // render the app as a string\r\n  const html = ReactDOMServer.renderToString(<App />);\r\n\r\n  // inject the rendered app into our html\r\n  return res.send(\r\n    htmlData.replace(\r\n      '<div id=\"root\"></div>',\r\n      `<div id=\"root\">${html}</div>`\r\n    )\r\n  );\r\n}\r\n\nThis is possible thanks to\u00a0ReactDOMServer.renderToString\u00a0which fully renders the HTML markup of a page to a string.\nWe finally need an entry point that will tell Node how to interpret our React JSX code. We achieve this with Babel.\nrequire('babel-register')({\r\n  ignore: [ /(node_modules)/ ],\r\n  presets: ['es2015', 'react-app']\r\n});\r\n\nTest it by yourself\n\ncheckout last changes on master branch\ninstall the dependencies with\u00a0yarn\nbuild the application with\u00a0yarn build\ndeclare babel environment in your terminal:\u00a0export BABEL_ENV=development\nlaunch your node server with\u00a0node server/bootstrap.js\nbrowse to\u00a0http://localhost:3001\u00a0to view the app\n\nStill simulating the \u20183G network\u2019 in Chrome, here is the result:\n\nDo not be mistaken, the page is rendered by server. But as soon as the javascript is fully loaded, window.document is available and the\u00a0isClientOrServer()\u00a0function returns\u00a0client.\nWe proved that we can do Server-side Rendering, but what\u2019s going on\u00a0with that React logo?!\nWe\u2019re missing many features\nOur example is a good proof of concept but very limited. We would like to see more features like:\n\nimport images in js files (logo problem)\nseveral routes usage or route management (check\u00a0this article)\ndeal with the\u00a0</head>\u00a0and the metatags (for SEO improvements)\ncode splitting (here is\u00a0an article\u00a0solving the problem)\nmanage the state of our app or use Redux (check this\u00a0great article\n\nand performance is bad on large pages:\u00a0ReactDOMServer.renderToString()\u00a0is a synchronous CPU bound call and can starve out incoming requests to the server. Walmart worked on\u00a0an optimization\u00a0for their e-commerce website.\nIt is possible to make Server-side Rendering\u00a0work perfectly on top of create-react-app, we won\u2019t go through all the painful work in this article. Still, if you\u2019re interested in it, I attached just above some great articles giving detailed explanations.\nSeriously\u2026 Next.js can bring you all these features!\n2) Next.js helps you building server rendered React.js Application\n\nWhat is Next.js?\nNext.js is a minimalistic framework for server-rendered React applications with:\n\na very simple page based routing\nWebpack hot reloading\nautomatic transpilation (with babel)\ndeployment facilities\nautomatic code splitting (loads page faster)\nbuilt in css support\nability to run server-side actions\nsimple integration with Redux using next-redux-wrapper.\n\nGet started in 1 minute\nIn this short example, we are going to see how crazy simple it is to have a server-side rendering app ready with Next.js.\nFirst, generate your package.json with\u00a0npm init\u00a0and install Next.js with\u00a0npm install --save next react react-dom. Then, add a script to your package.json like this:\n\"scripts\": {\r\n  \"dev\": \"next\",\r\n  \"build\": \"next build\",\r\n  \"start\": \"next start\"\r\n}\r\n\nCreate a pages/ folder. Every .js file becomes a route that gets automatically processed and rendered. Add a index.js file in that pages/ folder (with the execution of our\u00a0isClientOrServer\u00a0function):\nconst Index = ({ title = 'Hello from Next.js' }) => (\r\n  <div>\r\n    <h1>{title}</h1>\r\n    <p className=\"App-intro\">\r\n      Is my application rendered by server or client?\r\n    </p>\r\n    <h2><code>{isClientOrServer()}</code></h2>\r\n  </div>\r\n);\r\n\r\nexport default Index;\r\n\nNo need to import any library at the top of our index.js file, Next.js already knows that we are using React.\nNow enter\u00a0npm run dev\u00a0into your terminal and go to\u00a0http://localhost:3000: Tadaaaaa!\n\nRepeat the same operation inside your pages/ folder to create a new page. The url to access it will directly match the name you give to the file.\nYou\u2019re ready to go! You\u2019re already doing SSR. Check the\u00a0documentation on Next.js\u00a0official repository.\nUse create-next-app\nYou want to start a server-side rendered React app, you can now stop using create-react-app, and start using\u00a0create-next-app:\nnpm install -g create-next-app\r\n\r\ncreate-next-app my-app\r\ncd my-app/\r\nnpm run dev\r\n\nThis is all you need to do to create a React app with server-side rendering thanks to Next.js.\nFinally, better than a simple Hello World app, check this\u00a0Hacker News clone\u00a0implementing Next.js. It is fully server-rendered, queries the data over Firebase and updates in realtime as new votes come in.\nVue.js and Nuxt\nYou\u2019re maybe a Vue.js developer. Just after Next.js first release, two french brothers made the same for Vue.js: Nuxt was born! Like Vue, the Nuxt documentation is very clear and you can use the same starter template\u00a0vue-cli\u00a0for you app:\n vue init nuxt-community/starter-template <project-name> \nWhat\u2019s Next? \nHope you liked this article which was mainly written in order to introduce server-side rendering with Next.\nIf you are interested in server-side rendering for your existing React application, in the following, I am going to demonstrate how to migrate your existing create-react-app to Next.js. Coming soon\u2026\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tBaptiste Jan\r\n  \t\t\t\r\n  \t\t\t\tWeb Developer @Theodo. I like Vue.js and all the ecosystem growing around.  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\ttl:dr\nTo add a pre-commit git hook with Husky:\n\nInstall Husky with npm install husky --save-dev\nSet the pre-commit command in your package.json:\n\n\"scripts\": {\r\n    \"precommit\": \"npm test\"\r\n},\r\n\nWhat are git hooks?\nGit hooks are scripts launched when carrying out some git actions. The most common one is the pre-commit hook that\u00a0runs when performing git commit, before the commit is actually created.\nThe scripts are located in the .git/hooks folder. Check out the\u00a0.sample file examples in your local git repository.\n\nWhy do I need to install the Husky\u00a0package then?\nThe problem with git hooks is that they are in the .git directory, which means that they are not committed hence not shared between developers.\nHusky takes care of this: when a developer runs npm install, it will automatically create the scripts in .git/hooks:\n\nTheses scripts will parse your package.json and run the associated command. For example, the pre-commit script will run the npm run precommit command\n\"scripts\": {\r\n    \"precommit\": \"npm test\"\r\n},\r\n\nTo add husky to your project, simply run npm install husky --save-dev.\nFor more complex commands, I recommend to use a separate bash script :\u00a0\"precommit\": \"bash ./scripts/check-lint.sh\".\nEnhancing your git flow\nGit hooks are a convenient way to automate tasks during your git flow and protect you from pushing unwanted code by mistake.\n\nCheck for linting errors\n\nIf you have tools to check the code quality or formatting, you can run it on a pre-commit hook:\n\"scripts\": {\r\n    \"precommit\": \"prettier-check \\\"**/*.js\\\" && eslint . --quiet\"\r\n},\r\n\nI advise to run those tests on your CI tool as well, but checking it on a precommit hook can make you\u00a0save a lot of time as you won\u2019t have to wait for your CI to set up your whole project and fail only because you forgot a\u00a0semicolon.\n\nProtect important branches\n\nIn some rare situations, you have to push code directly on a branch that is deployed. One way to protect\u00a0it from developers in a hurry who forget to run the tests locally is to launch them on a pre-push hook:\n\"scripts\": {\r\n    \"prepush\": \"./scripts/pre-push-check.sh\"\r\n},\r\n\n\n#!/bin/bash\r\nset -e\r\n\r\nbranch=$(git branch | sed -n -e 's/^\\* \\(.*\\)/\\1/p')\r\nif [ \"$branch\" == \"master\" ]\r\nthen\r\n    npm test\r\nfi\r\n\n\nIf your tests fail, the code won\u2019t be pushed.\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tHugo Lime\r\n  \t\t\t\r\n  \t\t\t\tAgile Web Developer at Theodo.\r\n\r\nPassionate about new technologies to make web apps stronger and faster.  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tWhy\nWhat is a Virtual DOM ?\nThe virtual DOM (VDOM) is a programming concept where an ideal, or \u201cvirtual\u201d, representation of a UI is kept in memory.\nThen, it is\u00a0synced with the \u201creal\u201d DOM by a library such as ReactDOM. This process is called\u00a0reconciliation.\nPerformance\u00a0and\u00a0windowing\nYou might know that React uses this virtual DOM. Thus, it is only when React renders elements that the user will have them into his/her HTML DOM.\nSometimes you might want to display a lot of html elements, like for grids,\u00a0lists, calendars, dropdowns etc and the user will often complain about performance.\n\nHence, a good way\u00a0to display a lot of information is to \u2018window\u2019\u00a0it. The idea is to create only elements the user can see. An example is the Kindle vs Book. While the book is a heavy object because it \u2018renders\u2019 all the pages, the Kindle only display what the user can see.\nReact-Virtualized\nThat is how Brian Vaughn came up with the idea of creating React-Virtualized.\nIt is an open-source library which provides you many components in order to window some of your application List, Grid etc\nAs a developer, you do not want to reinvent the wheel. React-virtualized is a stable and maintained library. Its community is large and as it is open-source, many modules and extensions are already available in order to window a maximum of elements.\nFurthermore, it offers lots of functionalities and customization that you would not even think about.\nWe will discuss about it later, but before, let\u2019s see when to use React-virtualized.\nWhen\nWhen thinking about performance, lots of actions can be taken, but\u00a0React official website\u00a0already got a complete article to be read. In consequence, if you face a performance problem, be sure you have already done all of these before to start to window your application (but stay pragmatic).\nHow\nGetting into it\nOk, now that you\u2019re convinced, let\u2019s go throught the real part.\n\nYou can begin by following instructions for installing the right package via npm and look at simple examples here : React virtualized github.\u00a0However,\u00a0I\u2019m going to show you a complex example so you can use React-Virtualized in an advanced way.\nReact-Virtualized 101\nTo render a windowed list, no need for digging one hour a complex documentation, React-Virtualized is very simple to use.\nFirstly, you use the List component from the library, then, the few important props are the next one:\n\nwidth: the width of the List\nheight: the height of the List\nrowCount: the number of elements you will display\nrowHeight: the height of each row you will display\nrowRenderer: a callback method to define yourself depending on what you want to do with your data. This method is the core of your list, it is here that you define what will be rendered thanks to your data.\n\nThe example\n\r\nimport React from 'react';\r\nimport { List } from 'react-virtualized';\r\n\r\n// List data as an array of strings\r\nconst list = [\r\n 'Easy windowing1',\r\n 'Easy windowing2',\r\n // And so on...\r\n];\r\n\r\nfunction rowRenderer({\r\n key, // Unique key within array of rows\r\n index, // Index of row within collection\r\n isScrolling, // Used for performance\r\n isVisible, // Used for performancee\r\n style, // Style object to be applied to row (to position it)\r\n}) {\r\n return (\r\n\r\n<div key={key} style={style}>\r\n   {list[index]}\r\n </div>\r\n\r\n );\r\n}\r\n\r\n// Render your list\r\nconst ListExample = () => (\r\n <List width={300} height={300} rowCount={list.length} rowHeight={20} rowRenderer={rowRenderer} />\r\n);\r\n\nClick here to see a demo\nA more complex virtualized list:\nDisplay a virtualized list might be easy, but you might have a complicated behaviour to implement.\n\nIn this advanced example, we will:\n\nUse the AutoSizer HOC to automatically calculate the size the List will fill\nBe able to display row with a dynamic height using the CellMeasurer\nBe able to use the CellMeasurer even if the data are not static\n\nThis advanced example goes through 4 steps:\n\nInstantiate the AutoSizer and List component\nSee how the CellMeasurer and the CellMeasurerCache work\nLearn how we use them in the rowRenderer\nGo further with using these on a list that does not contain a stable number of elements\n\nThe example\nLet\u2019s look first at how we render the list:\n\u00a0\n\r\nimport {\r\n AutoSizer,\r\n List,\r\n CellMeasurer,\r\n CellMeasurerCache,\r\n} from 'react-virtualized';\r\n...\r\n<AutoSizer>\r\n {({ height, width }) => (\r\n  <List\r\n    width={width}\r\n    height={height}\r\n    rowGetter={({ index }) => rows[index]}\r\n    rowCount={1000}\r\n    rowHeight={40}\r\n    rowRenderer={this.rowRenderer}\r\n    headerHeight={20}\r\n  />\r\n )}\r\n</AutoSizer>\r\n\nIt is very simple:\n\nWe wrap the list with the AutoSizer HOC\nIt uses the CellMeasurerCache to know the height of each row and the rowRenderer to render the elements.\n\nHow it works :\nFirst, you instantiate a new CellMeasurerCache that will contain all the calculated heights :\n\r\nconstructor(props) {\r\n super(props);\r\n this.cache = new CellMeasurerCache({ //Define a CellMeasurerCache --> Put the height and width you think are the best\r\n defaultHeight: 80,\r\n minHeight: 50,\r\n fixedWidth: true,\r\n });\r\n}\r\n\nThen, you use the CellMeasurer in the rowRenderer method:\n\r\nrowRenderer = ({\r\n   key, // Unique key within array of rows\r\n   index, // Index of row within collection\r\n   parent,\r\n   isScrolling, // The List is currently being scrolled --> Important if you need some perf adjustment\r\n   isVisible, // This row is visible within the List (eg it is not an overscanned row)\r\n   style, // Style object to be applied to row (to position it)\r\n}) => (\r\n   <CellMeasurer\r\n     cache={this.cache}\r\n     columnIndex={0}\r\n     key={key}\r\n     parent={parent}\r\n     rowIndex={index}\r\n   >\r\n   <div\r\n     className=\"Row\"\r\n     key={key}\r\n     style={{\r\n       ...style,\r\n       display: 'flex',\r\n     }}\r\n   >\r\n     <span style={{ width: 400 }}>{rows[index].name}</span>\r\n     <span style={{ width: 100 }}>{rows[index].age}</span>\r\n   </div>\r\n   </CellMeasurer>\r\n);\r\n\n\u00a0\nPitfall:\nFinally, we obtain a nice windowed list, ready to be deployed and used\u2026\nUnless your application contain filters or some data added dynamically.\nActually, when I implemented this, after using some filters, some blank spaces were staying in the list.\nIt is a performance consideration due to the fact we use a cache, but it is a good compromise unless you have many rows and many columns in a Grid (as we display a list, we only have 1 column).\nConsequently, I managed to fix this issue by clearing the cache every time my list had its data reloaded:\n\r\ncomponentWillReceiveProps() { //Really important !!\r\n this.cache.clearAll(); //Clear the cache if row heights are recompute to be sure there are no \"blank spaces\" (some row are erased)\r\n this.virtualizedList && this.virtualizedList.recomputeRowHeights(); //We need to recompute the heights\r\n}\r\n\nA big thanks to\u00a0Brian Vaughn\u00a0for this amazing library\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tCyril Gaunet\r\n  \t\t\t\r\n  \t\t\t\tDeveloper at Theodo  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"},
{"article": "\r\n\t\t\t\t\t\t\t\t\t\tThanks to a new colleague of mine, I have learned how to make my git history cleaner and more understandable. \nThe principle is simple: rebase your branch before you merge it. But this technique also has weaknesses. In this article, I will explain what a rebase and a merge really do and what are the implications of this technique.\nBasically, here is an example of my git history before and after I used this technique.\n\nStay focus, rebase and merge are no joke! \nWhat is the goal of a rebase or a merge ?\nRebase and merge both aim at integrating changes that happened on another branch into your branch.\nWhat happens during a merge ?\nFirst of all there are two types of merge:\n\nFast-forward merge\n3-way merge\n\nFast-forward merge\nA fast-forward merge happens when the most recent shared commit between the two branches is also the tip of the branch in which you are merging.\nThe following drawing shows what happens during a fast-forward merge and how it is shown on a graphical git software.\nA: the branch in which you are merging\nB: the branch from which you get the modifications\n\ngit checkout A\ngit merge B\n\n\nAs you can see, git simply brings the new commits on top of branch A. After a fast-forward merge, branches A and B are exactly the same.\nNotes:\n\ngit checkout A, git rebase B you would have had the exact same result!\ngit checkout B, git merge A would have left the branches in the \u201cbefore\u201d situation, since branch A has no new commits for branch B.\n\n3-way merge\nA 3-way merge happens when both branches have had new commits since the last shared commit.\nThe following drawing shows what happens during a 3-way merge and how it is shown in a graphical git software.\nA: the branch in which you are merging\nB: the branch from which you get the modifications\n\ngit checkout A\ngit merge B\n\n\nDuring a 3-way merge, git creates a new commit named \u201cmerge commit\u201d (in orange) that contains:\n\nAll the modifications brought by the three commits from B (in purple)\nThe possible conflict resolutions\n\nGit will keep all information about the commits of the merged branch B even if you delete it. On a graphical git software, git will also keep a small loop to represent the merge.\nThe default behaviour of git is to try a fast-forward merge first. If it\u2019s not possible, that is to say if both branch have had changes since the last shared commit, it will be a 3-way merge.\nWhat happens during a rebase?\nA rebase differ from a merge in the way in which it integrates the modifications.\nThe following drawings show what happens during a rebase and how it is shown in a graphical git software.\nA: the branch that you are rebasing\nB: the branch from which you get the new commits\n\ngit checkout A\ngit rebase B\n\n\n\nWhen you rebase A on B, git creates a temporary branch that is a copy of branch B, and tries to apply the new commits of A on it one by one.\nFor each commit to apply, if there are conflicts, they will be resolved inside of the commit.\nAfter a rebase, the new commits from A (in blue) are not exactly the same as they were:\n\nIf there were conflicts, those conflicts are integrated in each commit\nThey have a new hash\n\nBut they keep their original date which might be confusing since in the final branch, commits in blue were created before the two last commits in purple.\nWhat is the best solution to integrate a new feature into a shared branch and keep your git tree clean?\nLet say that you have a new feature made of three new commits on a branch named `feature`. You want to merge this branch into a shared branch, for exemple `master` that has received two new commits since you started from it.\nYou have two main solutions: \nFirst solution: \n\ngit checkout feature\ngit rebase master\ngit checkout master\ngit merge feature\n\n\nNote : Be careful, git merge feature should do a fast-forward merge, but some hosting services for version control do a 3-way merge anyway. To prevent this, you can use git merge feature \u2013ff-only\nSecond solution:\n\ngit checkout master\ngit merge feature\n\n\nAs you can see, the final tree is more simple with the first solution. You simply have a linear git history. On the opposite, the second solution creates a new \u201cmerge commit\u201d and a loop to show that a merge happened.\nIn this situation, the git tree is still readable, so the advantage of the first solution is not so obvious. The complexity emerges when you have several developers in your team, and several feature branches developed at the same time. If everyone uses the second solution, your git tree ends up complex with several loop, and it can even be difficult to see which commits belong to which branch!\nUnfortunately, the first solution has a few drawbacks:\nHistory rewriting\nWhen you use a rebase, like in the first solution, you \u201crewrite history\u201d because you change the order of past commits on your branch. This can be problematic if several developers work on the same branch: when you rewrite history, you have to use git push \u2013 \u2013 force in order to erase the old branch on the remote repository and put your new branch (with the new history) in its place.\nThis can potentially erase changes another developer made, or introduce conflicts resolution for him.\nTo avoid this problem, you should only rebase branches on which you are the only one working. For example in our case, if you are the only one working on the feature branch.\nHowever you might sometime have to rewrite history of shared branches. In this case, make sure that the other developers working on the branch are aware of it, and are available to help you if you have conflicts to resolve.\nThe obvious advantage of the 3-way merge here, is that you don\u2019t rewrite history at all.\nConflicts resolution\nWhen you merge or rebase, you might have to resolve conflicts.\nWhat I like about the rebase, is that the conflicts added by one commit will be resolved in this same commit. On the opposite, the 3-way merge will resolve all the conflicts into the new \u201cmerge commit\u201d, mixing all together the conflicts added by the different commits of your feature branch.\nThe only problem with the rebase is that you may have to resolve more conflicts, due to the fact that the rebase applies the commits of your branch one by one.\nConclusion\nTo conclude, I hope I have convinced you that rebasing your branch before merging it, can clear your git history a lot! Here is a recap of the advantages and disadvantages of the rebase and merge method versus the 3-way merge method:\n\n\u00a0\n\r\n\t\t\t\t\t\t\t\t\t\tYou liked this article? You'd probably be a good match for our ever-growing tech team at Theodo. Join Us\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tWRITTEN BY\r\n\r\n\t\r\n\t\t    \r\n  \t\t\r\n  \t\t\t\r\n  \t\t\t\t  \t\t\t\r\n  \t\t\r\n\r\n  \t\t\r\n\t\t\t\tJ\u00e9r\u00e9mie Marniquet Fabre\r\n  \t\t\t\r\n  \t\t\t\tI am an agile web developer at Theodo, I enjoy outdoor sports (mountain biking, skiing...) and new technologies !  \t\t\t\r\n  \t\t\r\n    \r\n\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t"}
]